git clone

С помощью команды операционной системы cd перейдите к каталогу на своём компьютере, в который вы хотите клонировать репозиторий с GitHub. 
Например, cd c:\projects\Skillfactory (формат команды для Windows).
Наберите команду git clone, после которой укажите URL к вашему репозиторию на GitHub. 
Вы можете скопировать этот URL на GitHub и вставить его в командную строку. Например, командная строка может выглядеть так: 
git clone https://github.com/fkosta/TestRepoSF00 
Нажатием на клавишу Enter завершите ввод. Репозиторий с GitHub будет клонирован на компьютер.
______________________________________________________________________________________________________________________________________________
git status

Это основная команда для отслеживания изменений файлов, находящихся в репозитории. Команда выводит информацию о тех файлах репозитория, 
которые пока ещё не находятся под версионным контролем или не отслеживаются, и о тех файлах, которые были изменены, 
и изменения которых ещё не были зафиксированы.
______________________________________________________________________________________________________________________________________________
dir

вывод (показ) содержимого каталога (локального репозитория)
______________________________________________________________________________________________________________________________________________
git add .

Чтобы файл попал под версионный контроль и впоследствии в нём можно было зафиксировать изменения необходимо выполнить команды git add.
Она переносит файл в директорию подготовленных файлов. Эта команда принимает как параметр имя файлов, 
которые нужно перенести в подготовленные для фиксации. 
Также можно использовать метасимволы, например . (git add .), что означает «добавить все изменённые и неотслеживаемые файлы в подготовленные».
______________________________________________________________________________________________________________________________________________
git commit
git commit -m "сообщение"

Git хранит данные в виде набора легковесных «снимков», известных как коммиты. Они хранят состояние файловой системы в определённый 
момент времени, а также указатель на предыдущий(-ие) коммит(-ы). 
Для фиксации изменений необходимо выполнить команду git commit. Если эту команду подать без параметров, то откроется редактор, 
в котором вам нужно будет добавить сообщение к этому коммиту.
Можно добавить сообщение после команды git commit с помощью параметра -m, после которого включается сообщение в кавычках.
Команда выполнения коммита git commit вывела следующую информацию:
1) На какую ветку был выполнен коммит.
2) Какая контрольная сумма SHA-1 у этого коммита.
3) Сколько файлов было изменено.
4) Статистику по добавленным/удалённым строкам в этом коммите.
______________________________________________________________________________________________________________________________________________
git push

Команда, которую нужно использовать для публикации изменений на сервере
______________________________________________________________________________________________________________________________________________
git log

Команда, показывающая историю изменений.
По умолчанию (без аргументов) git log перечисляет коммиты, сделанные в репозитории в обратном к хронологическому порядке: 
последние коммиты находятся вверху.
Из примера можно увидеть, что данная команда перечисляет коммиты с их SHA-1 контрольными суммами, именем и электронной почтой автора, 
датой создания и сообщением коммита. Напротив самого последнего коммита выводится информация о состоянии индекса:
HEAD -> master, origin/master, origin/HEAD
Это означает, что в настоящий момент индекс указывает на master ветку локального репозитория, 
который синхронизирован с master веткой удалённого репозитория.
_______________________________________________________________________________________________________________________________________________
git rm

Удаление файла.
Выберите один из файлов в репозитории и введите команду git rm, указав после неё имя файла. 
После этой команды необходимо зафиксировать изменения и опубликовать их на сервере. 
Просто так удалить файл, находящийся под версионным контролем, не получится, потому как есть снимок этого файла в репозитории 
и файл в рабочем каталоге будет восстановлен из этого снимка. Поэтому и необходимо использовать команду git rm для полного удаления файла.